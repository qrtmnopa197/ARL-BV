data$chosen_out
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R", echo=TRUE)
block_data$chosen_out_sum <- exp_sum(block_data$chosen_out,block_data$gamma[1])
data_list <- append(data_list,block_data)
append(data_list,block_data)
data_list <- list()
for(s in 1:max(data$sub_index)){
for(b in 1:max(data$block)){
block_data <- filter(data,sub_index == s & block == b)
block_data$chosen_out_sum <- exp_sum(block_data$chosen_out,block_data$gamma[1])
data_list[[(s-1)*2+b]] <- block_data
}
}
test <- do.call(rbind,data_list)
view(test)
view(data_list)
head(data_list)
length(data_list)
79*2
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
view(test)
test <- do.call(rbind,data_list)
view(test)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
for(r in 1:nrow(data)){
# Get chosen Q value
data$q_ch[r] <- data[r,paste0("q_",data$chosen_frac[r])]
data$q_unch[r] <- data[r,paste0("q_",data$unchosen_frac[r])]
}
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
data <- trials_bqba_sim %>%
mutate(choice=as.vector(sim_choice_chunk[i,c,])) %>%
left_join(data.frame(valence_dec = as.vector(sim_dec_rat_chunk[i,c,]),
dec_probe_number = 1:dim(sim_dec_rat_chunk)[3]),
by="dec_probe_number") %>%
left_join(data.frame(valence_feed = as.vector(sim_feed_rat_chunk[i,c,]),
feed_probe_number = 1:dim(sim_feed_rat_chunk)[3]),
by="feed_probe_number") %>%
mutate(chosen_frac = ifelse(choice == 1,fA_ix,fB_ix)) %>%
mutate(unchosen_frac = ifelse(choice == 1,fB_ix,fA_ix)) %>%
mutate(chosen_out = ifelse(choice == 1,out_a,out_b)) %>%
mutate(unchosen_out = ifelse(choice == 1,out_b,out_a))
# Get Q and V values
data <- data %>%
split(data$sub_index) %>%
lapply(add_assoc, cue_cols = c("fA_ix","fB_ix"), out_cols = c("out_a","out_b"),
num_assoc = 12, assoc_name = "q", lrn_rate = "alpha", for_rate = "alpha") %>%
lapply(add_assoc, cue_cols = c("block"), out_cols = c("chosen_out"),
num_assoc = 2, assoc_name = "v", lrn_rate = "alpha") %>%
mutate(v = ifelse(block == 1,v_1,v_2)) %>%
select(-v_1,-v_2)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
# Get Q and V values
data <- data %>%
split(data$sub_index) %>%
lapply(add_assoc, cue_cols = c("fA_ix","fB_ix"), out_cols = c("out_a","out_b"),
num_assoc = 12, assoc_name = "q", lrn_rate = "alpha", for_rate = "alpha") %>%
lapply(add_assoc, cue_cols = c("block"), out_cols = c("chosen_out"),
num_assoc = 2, assoc_name = "v", lrn_rate = "alpha") %>%
bind_rows() %>%
mutate(v = ifelse(block == 1,v_1,v_2)) %>%
select(-v_1,-v_2)
nrow(data)
9954/79
view(data)
2.59*.3
2.59*.67
.365/2
for(r in 1:nrow(data)){
# Get chosen Q value
data$q_ch[r] <- data[r,paste0("q_",data$chosen_frac[r])]
data$q_unch[r] <- data[r,paste0("q_",data$unchosen_frac[r])]
}
# Calculate summed valence predictors
data_list <- list()
s <- 1
b <- 1
block_data <- filter(data,sub_index == s & block == b)
# Decision predictors
block_data$v_sum <- exp_sum(block_data$v,block_data$gamma[1])
block_data$q_unch_sum <- exp_sum(block_data$q_unch,block_data$gamma[1])
block_data$q_ch_dec_sum <- exp_sum(block_data$q_ch,block_data$gamma[1])
# Feedback predictors
block_data$q_ch_feed_sum <- exp_sum(block_data$q_ch,block_data$gamma[1])
block_data$chosen_out_sum <- exp_sum(block_data$chosen_out,block_data$gamma[1])
block_data$unchosen_out_sum <- exp_sum(block_data$unchosen_out,block_data$gamma[1])
data_list[[(s-1)*2+b]] <- block_data
view(data_list[[1]])
data_list <- list()
for(s in 1:max(data$sub_index)){
for(b in 1:max(data$block)){
block_data <- filter(data,sub_index == s & block == b)
# Decision predictors
block_data$v_sum <- exp_sum(block_data$v,block_data$gamma[1])
block_data$q_unch_sum <- exp_sum(block_data$q_unch,block_data$gamma[1])
block_data$q_ch_dec_sum <- exp_sum(block_data$q_ch,block_data$gamma[1])
# Feedback predictors
block_data$q_ch_feed_sum <- exp_sum(block_data$q_ch,block_data$gamma[1])
block_data$chosen_out_sum <- exp_sum(block_data$chosen_out,block_data$gamma[1])
block_data$unchosen_out_sum <- exp_sum(block_data$unchosen_out,block_data$gamma[1])
data_list[[(s-1)*2+b]] <- block_data
}
}
test <- do.call(rbind,data_list)
view(test)
view(filter(test,sub_index==5))
view(filter(test,sub_index==50))
-.53+.68*.316
nrow(test)
data <- do.call(rbind,data_list)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
names(trials)
data$feed_probe_number
data <- data %>% mutate(val_rat = case_when(
feed_probe_number != 0 ~ valence_feed,
dec_probe_number != 0 ~ valence_dec,
TRUE ~ NA
)
)
view(data)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
# Adjust sums for outcome-related predictors when there are decision probes
data <- data %>%
mutate(chosen_out_sum =
ifelse(dec_probe_number == 0, chosen_out_sum, chosen_out_sum - chosen_out)) %>%
mutate(unchosen_out_sum =
ifelse(dec_probe_number == 0, unchosen_out_sum, unchosen_out_sum - unchosen_out)) %>%
mutate(q_ch_feed_sum =
ifelse(dec_probe_number == 0, q_ch_feed_sum, q_ch_feed_sum - q_ch))
view(data)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
arl <- read_fsml("arl",model_out_dir=model_out_dir)
view(filt_sum(arl$sum,"dec"))
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
val_fit <- lm(val_rat ~ v_sum + q_unch_sum + q_ch_dec_sum +
q_ch_feed_sum + chosen_out_sum + unchosen_out_sum +
scale(block) + scale(trial_nl), data)
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
summary(val_fit)
val_fit$coefficients[6]
val_fit$coefficients[7]
val_fit$coefficients[5]
data <- data %>% mutate(feed_imp = val_fit$coefficients[5]*q_ch +
val_fit$coefficients[6]*chosen_out +
val_fit$coefficients[7]*unchosen_out)
# Get remaining associations used to predict choice
data <- data %>%
mutate(fA_chosen=ifelse(choice==1,1,0)) %>%
mutate(fB_chosen=ifelse(choice==2,1,0))
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
source("~/projects/spring_2022_study/code/functions/s22_utilities.R")
data <- data %>%
split(data$sub_index) %>%
lapply(add_assoc, cue_cols = "chosen_frac", out_cols = "feed_imp",
num_assoc = 12, assoc_name = "a", lrn_rate = "alpha", for_rate = "alpha") %>%
lapply(add_assoc, cue_cols = c("fA_ix","fB_ix"), out_cols = c("fA_chosen","fB_chosen"),
num_assoc = 12, assoc_name = "c", lrn_rate = "tau") %>%
bind_rows()
for(r in 1:nrow(data)){
data[r,"c_A"] <- data[r,paste0("c_",data[r,"fA_ix"])]
data[r,"c_B"] <- data[r,paste0("c_",data[r,"fB_ix"])]
data[r,"q_A"] <- data[r,paste0("q_",data[r,"fA_ix"])]
data[r,"q_B"] <- data[r,paste0("q_",data[r,"fB_ix"])]
data[r,"a_A"] <- data[r,paste0("a_",data[r,"fA_ix"])]
data[r,"a_B"] <- data[r,paste0("a_",data[r,"fB_ix"])]
}
data <- data %>%
mutate(c_diff = c_A - c_B) %>%
mutate(q_diff = q_A - q_B) %>%
mutate(a_diff = a_A - a_B)
data$fA_chosen
# Estimate standardized effects on choice
choice_fit <- glm(fA_chosen ~ scale(q_diff) + scale(a_diff) + scale(c_diff),
data, family = "binomial")
list("bQ"=choice_fit$coefficients[2],"bA"=choice_fit$coefficients[3])
view(data)
view(data)
view(select(data,a_diff,q_diff,c_diff),sub_index==4)
view(select(data,a_diff,q_diff,c_diff) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,chosen_out,unchosen_out,chosen_frac,unchosen_frac) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,chosen_out,unchosen_out,chosen_frac,fA_ix,fB_ix,alpha,forget) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,chosen_out,unchosen_out,chosen_frac,fA_ix,fB_ix,alpha) %>% filter(sub_index==4))
.175*7
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,chosen_out,unchosen_out,chosen_frac,fA_chosen) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,chosen_out,unchosen_out,fA_ix,fB_ix,fA_chosen) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,chosen_out,unchosen_out,fA_ix,fB_ix,fA_chose,alphan) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,chosen_out,unchosen_out,fA_ix,fB_ix,fA_chose,alpha) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,chosen_out,unchosen_out,fA_ix,fB_ix,fA_chosen,alpha) %>% filter(sub_index==4))
.175*7
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,out_a,out_b,fA_ix,fB_ix,fA_chosen,alpha) %>% filter(sub_index==4))
view(select(data,a_diff,q_diff,c_diff,sub_index,feed_imp,out_a,out_b,fA_ix,fB_ix,fA_chosen,alpha,tau) %>% filter(sub_index==4))
9*.17
source("~/projects/spring_2022_study/code/functions/s22_utilities.R", echo=TRUE)
trials$choice
trials$chosen_outcome
# Get necessary data
trials_bqba_real <- trials %>% select(sub_index,block,trial_nl,fractal_a_num,fractal_b_num,
outcome_a,outcome_b,dec_probe_number,feed_probe_number,
valence_dec,valence_feed,choice,chosen_frac,unchosen_frac,
chosen_outcome,unchosen_outcome) %>%
rename(fA_ix = fractal_a_num, fB_ix = fractal_b_num,
out_a = outcome_a, out_b = outcome_b,chosen_out=chosen_outcome,
unchosen_out=unchosen_outcome) %>%
mutate(choice = ifelse(choice,"fractal_a_dec",1,2))
# Get necessary data
trials_bqba_real <- trials %>% select(sub_index,block,trial_nl,fractal_a_num,fractal_b_num,
outcome_a,outcome_b,dec_probe_number,feed_probe_number,
valence_dec,valence_feed,choice,chosen_frac,unchosen_frac,
chosen_outcome,unchosen_outcome) %>%
rename(fA_ix = fractal_a_num, fB_ix = fractal_b_num,
out_a = outcome_a, out_b = outcome_b,chosen_out=chosen_outcome,
unchosen_out=unchosen_outcome) %>%
mutate(choice = ifelse(choice == "fractal_a_dec",1,2))
arl <- read_fsml("arl",model_out_dir=model_out_dir)
trials_bqba_real <- add_param_means(arl$sum,"alpha",trials_bqba_real)
trials_bqba_real <- add_param_means(arl$sum,"tau",trials_bqba_real)
trials_bqba_real <- add_param_means(arl$sum,"gamma",trials_bqba_real)
real_effs <- est_bq_ba_s1(trials_bqba_real)
real_effs
save(real_effs,file=paste0(path_to_project_directory,"output/s1_aff_only_real_effs.Rdata"))
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
##SET MANUALLY
path_to_project_directory <- "~/projects/spring_2022_study/"
path_to_fu_project_directory <- "~/projects/s22_follow_up/"
path_to_bv_project_directory <- "~/projects/ARL_BV/"
##############
stan_model_dir <- paste0(path_to_project_directory,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/final_models/")
model_out_dir_fu <- paste0(path_to_fu_project_directory,"output/results/stan_model_fits/")
library(cmdstanr)
library(tidyverse)
library(bayesplot)
library(tidybayes)
library(grid)
library(abind)
library(patchwork)
library(sigmoid)
source(paste0(path_to_project_directory,"code/functions/s22_utilities.R"))
source(paste0(path_to_bv_project_directory,"code/functions/arlbv_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/stan_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2022-05-22_19_14_57.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2022-05-22_19_14_57.csv"))
#identify subjects who fail the hard QC cutoffs
sub_hard_fail <- subs %>% filter(att_checks_passed == 0 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 126 |
probe_skipped_percent > .14 |
id %in% c(86956,86746,86839,80227,79198,86503,86869,85588))
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] == 1,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$probe_skipped_percent[i] > .07,subs$noprobe_pt_choices[i] == 0,subs$probe_pt_choices[i] == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
trials <- trials %>% filter(!(id %in% subs_to_exclude)) %>% filter(choice != "late") #filter out bad subjects, as well as trials on which the subject failed to make a choice
subs <- subs %>% filter(!(id %in% subs_to_exclude))
#trials <- trials %>% filter(!(id %in% c(86077,86134,86356,87163,86458,85588,86869,86956,86746,79198,86359,86503,86881))) %>% filter(choice != "late")
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
##SET MANUALLY
path_to_project_directory <- "~/projects/spring_2022_study/"
path_to_fu_project_directory <- "~/projects/s22_follow_up/"
path_to_bv_project_directory <- "~/projects/ARL_BV/"
##############
stan_model_dir <- paste0(path_to_project_directory,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/final_models/")
model_out_dir_fu <- paste0(path_to_fu_project_directory,"output/results/stan_model_fits/")
library(cmdstanr)
library(tidyverse)
library(bayesplot)
library(tidybayes)
library(grid)
library(abind)
library(patchwork)
library(sigmoid)
source(paste0(path_to_project_directory,"code/functions/s22_utilities.R"))
source(paste0(path_to_bv_project_directory,"code/functions/arlbv_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/stan_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2022-05-22_19_14_57.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2022-05-22_19_14_57.csv"))
#identify subjects who fail the hard QC cutoffs
sub_hard_fail <- subs %>% filter(att_checks_passed == 0 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 126 |
probe_skipped_percent > .14 |
id %in% c(86956,86746,86839,80227,79198,86503,86869,85588))
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] == 1,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$probe_skipped_percent[i] > .07,subs$noprobe_pt_choices[i] == 0,subs$probe_pt_choices[i] == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
trials <- trials %>% filter(!(id %in% subs_to_exclude)) %>% filter(choice != "late") #filter out bad subjects, as well as trials on which the subject failed to make a choice
subs <- subs %>% filter(!(id %in% subs_to_exclude))
#trials <- trials %>% filter(!(id %in% c(86077,86134,86356,87163,86458,85588,86869,86956,86746,79198,86359,86503,86881))) %>% filter(choice != "late")
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
#convert affect ratings to subject-by-subject z-scores, to control for intersubject differences in rating variability
trials[c("valence_dec","valence_feed")] <- trials[c("valence_dec","valence_feed")]*-1 #flip the affect ratings, so that the low numbers
#correspond to low values of valence
trials <- do.call(rbind,by(trials,trials$id,col_zscore,c("valence_dec","valence_feed"))) #translate valence ratings to z-scores
#add a column with the affect probe number for each subject (999 if no probe response). These will be passed into Stan
trials <- add_probe_number(trials,newcol="dec_probe_number",val_col="valence_dec",arous_col="arousal_dec") #for decision probes
trials <- add_probe_number(trials,newcol="feed_probe_number",val_col="valence_feed",arous_col="arousal_feed") #for feedback probes
#add a column with completed trial numbers - the trial indices if you ignore late trials. These will match the "t" trial numbers used in the Stan models
trials <- do.call(rbind,by(trials,trials$sub_index,add_trials_nl))
trials$overall_trial_nl <- 1:nrow(trials) #get the overall trial number ignoring late trials and collapsing across subjects
trials <- trials %>% mutate(dec_probe_completed = if_else(is.na(arousal_dec) | is.na(valence_dec),0,1)) #add a 1/0 column indicating whether a
#decision probe was completed on each trial
trials <- trials %>% mutate(feed_probe_completed = if_else(is.na(arousal_feed) | is.na(valence_feed),0,1)) #diddo feedback
#get mean-centeedr trial and block predictors for easier fitting in Stan
trials$trial_nl_cent <- trials$trial_nl - mean(trials$trial_nl)
trials$block_cent <- trials$block - mean(trials$block)
#get the chosen fractal index
trials <- trials %>% mutate(chosen_frac = ifelse(choice == "fractal_a_dec",fractal_a_num,fractal_b_num))
trials <- trials %>% mutate(unchosen_frac = ifelse(choice == "fractal_a_dec",fractal_b_num,fractal_a_num))
#add columns showing the pairs at play in each block
new_trials_list <- by(trials,trials$id,create_pair_cols_sub)
trials <- do.call(rbind,new_trials_list)
# aff_only_s1 <- fit_stan_model(stan_file = paste0(stan_model_dir,"aff_only_s1.stan"),
#                                          model_out_dir = model_out_dir,
#                                          raw_data = trials,
#                                          n_t=126,
#                                          pes = FALSE,
#                                          arl = FALSE)
aff_only_s1 <- read_fsml("aff_only_s1",model_out_dir=model_out_dir)
# Get necessary data
trials_bqba_sim <- trials %>% select(sub_index,block,trial_nl,fractal_a_num,fractal_b_num,
outcome_a,outcome_b,dec_probe_number,feed_probe_number) %>%
rename(fA_ix = fractal_a_num, fB_ix = fractal_b_num,
out_a = outcome_a, out_b = outcome_b)
# Add parameter means needed for approximate data analysis
trials_bqba_sim <- add_param_means(aff_only_s1$sum,"alpha",trials_bqba_sim)
trials_bqba_sim <- add_param_means(aff_only_s1$sum,"tau",trials_bqba_sim)
trials_bqba_sim <- add_param_means(aff_only_s1$sum,"gamma",trials_bqba_sim)
# Get simulated data
sim_choice <- get_draws(model="aff_only_s1",vars=c("sim_choice"),model_out_dir=model_out_dir)
sim_feed_rat <- get_draws("aff_only_s1",vars=c("sim_feed_rat"),model_out_dir=model_out_dir)
sim_dec_rat <- get_draws("aff_only_s1",vars=c("sim_dec_rat"),model_out_dir=model_out_dir)
plan(multisession, workers = 12)
library(future)
library(doFuture)
library(foreach)
plan(multisession, workers = 12)
registerDoFuture()
sim_effs <- data.frame("bQs"=c(),"bAs"=c())
for(chunk in 1:8){
# Divide the simulations into 8 chunks, to avoid overtaxing memory
iters <- ((chunk-1)*125+1):(chunk*125)
sim_choice_chunk <- sim_choice[iters,,]
sim_dec_rat_chunk <- sim_dec_rat[iters,,]
sim_feed_rat_chunk <- sim_feed_rat[iters,,]
chunk_effs <- foreach(i = 1:125, .combine = rbind) %dopar% {
iter_effs <- data.frame(matrix(0,ncol=2,nrow=4))
colnames(iter_effs) <- c("bQs","bAs")
for(c in 1:4){
# Add simulated choices and ratings to the data
sim_trials <- trials_bqba_sim %>%
mutate(choice=as.vector(sim_choice_chunk[i,c,])) %>%
left_join(data.frame(valence_dec = as.vector(sim_dec_rat_chunk[i,c,]),
dec_probe_number = 1:dim(sim_dec_rat_chunk)[3]),
by="dec_probe_number") %>%
left_join(data.frame(valence_feed = as.vector(sim_feed_rat_chunk[i,c,]),
feed_probe_number = 1:dim(sim_feed_rat_chunk)[3]),
by="feed_probe_number") %>%
mutate(chosen_frac = ifelse(choice == 1,fA_ix,fB_ix)) %>%
mutate(unchosen_frac = ifelse(choice == 1,fB_ix,fA_ix)) %>%
mutate(chosen_out = ifelse(choice == 1,out_a,out_b)) %>%
mutate(unchosen_out = ifelse(choice == 1,out_b,out_a))
# Get estimated effects of Q and A on choice
est_eff <- est_bq_ba_s1(sim_trials)
iter_effs$bQs[c] <- est_eff$bQ
iter_effs$bAs[c] <- est_eff$bA
}
return(iter_effs)
}
sim_effs <- rbind(sim_effs,chunk_effs)
}
save(sim_effs,file=paste0(path_to_project_directory,"output/s1_aff_only_sim_effs.Rdata"))
# Get necessary data
trials_bqba_real <- trials %>% select(sub_index,block,trial_nl,fractal_a_num,fractal_b_num,
outcome_a,outcome_b,dec_probe_number,feed_probe_number,
valence_dec,valence_feed,choice,chosen_frac,unchosen_frac,
chosen_outcome,unchosen_outcome) %>%
rename(fA_ix = fractal_a_num, fB_ix = fractal_b_num,
out_a = outcome_a, out_b = outcome_b,chosen_out=chosen_outcome,
unchosen_out=unchosen_outcome) %>%
mutate(choice = ifelse(choice == "fractal_a_dec",1,2))
arl <- read_fsml("arl",model_out_dir=model_out_dir)
# Add parameter means needed for approximate data analysis
trials_bqba_real <- add_param_means(arl$sum,"alpha",trials_bqba_real)
trials_bqba_real <- add_param_means(arl$sum,"tau",trials_bqba_real)
trials_bqba_real <- add_param_means(arl$sum,"gamma",trials_bqba_real)
real_effs <- est_bq_ba_s1(trials_bqba_real)
save(real_effs,file=paste0(path_to_project_directory,"output/s1_aff_only_real_effs.Rdata"))
ggplot(sim_effs, aes(x = bQs)) +
geom_histogram(fill = "steelblue", color = "black") +  # Adjust binwidth as needed
geom_vline(xintercept = 0, color = "black", size = 1) +  # Black vertical line at 0
geom_vline(xintercept = real_effs$bQ, color = "red", size = 1)
real_effs$bQ - mean(sim_effs$bQs)
1/4000
load(file=paste0(path_to_project_directory,"output/s2_aff_only_sim_effs.Rdata"))
##SET MANUALLY
path_to_project_directory <- "~/projects/spring_2022_study/"
path_to_fu_project_directory <- "~/projects/s22_follow_up/"
path_to_bv_project_directory <- "~/projects/ARL_BV/"
##############
stan_model_dir <- paste0(path_to_project_directory,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/final_models/")
model_out_dir_fu <- paste0(path_to_fu_project_directory,"output/results/stan_model_fits/")
load(file=paste0(path_to_project_directory,"output/s2_aff_only_sim_effs.Rdata"))
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
##SET MANUALLY
path_to_project_directory <- "~/projects/spring_2022_study/"
path_to_fu_project_directory <- "~/projects/s22_follow_up/"
path_to_bv_project_directory <- "~/projects/ARL_BV/"
##############
stan_model_dir <- paste0(path_to_project_directory,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/final_models/")
model_out_dir_fu <- paste0(path_to_fu_project_directory,"output/results/stan_model_fits/")
library(cmdstanr)
library(tidyverse)
library(bayesplot)
library(tidybayes)
library(grid)
library(abind)
library(patchwork)
library(sigmoid)
library(future)
library(doFuture)
library(foreach)
source(paste0(path_to_project_directory,"code/functions/s22_utilities.R"))
source(paste0(path_to_bv_project_directory,"code/functions/arlbv_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/stan_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2022-05-22_19_14_57.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2022-05-22_19_14_57.csv"))
load(file=paste0(path_to_project_directory,"output/s2_aff_only_sim_effs.Rdata"))
load("/Users/dp/projects/s22_follow_up/output/s2_aff_only_sim_effs.Rdata")
load(/Users/dp/projects/s22_follow_up/output/s2_aff_only_real_effs.Rdata)
load("/Users/dp/projects/s22_follow_up/output/s2_aff_only_real_effs.Rdata")
real_effs$bQ - mean(sim_effs$bQs)
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
##SET MANUALLY
path_to_project_directory <- "~/projects/spring_2022_study/"
path_to_fu_project_directory <- "~/projects/s22_follow_up/"
path_to_bv_project_directory <- "~/projects/ARL_BV/"
##############
stan_model_dir <- paste0(path_to_project_directory,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/final_models/")
model_out_dir_fu <- paste0(path_to_fu_project_directory,"output/results/stan_model_fits/")
fig_dir <- "/Users/dp/Documents/manuscripts/vrv/figures_tables/"
library(cmdstanr)
library(tidyverse)
library(bayesplot)
library(tidybayes)
library(grid)
library(abind)
library(patchwork)
library(sigmoid)
library(future)
library(doFuture)
library(foreach)
source(paste0(path_to_project_directory,"code/functions/s22_utilities.R"))
source(paste0(path_to_bv_project_directory,"code/functions/arlbv_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/stan_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2022-05-22_19_14_57.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2022-05-22_19_14_57.csv"))
load(file=paste0(path_to_project_directory,"output/s1_aff_only_sim_effs.Rdata"))
load(file=paste0(path_to_project_directory,"output/s1_aff_only_real_effs.Rdata"))
ggplot(sim_effs, aes(x = bQs)) +
geom_histogram(fill = "steelblue", color = "black") +  # Adjust binwidth as needed
geom_vline(xintercept = 0, color = "black", size = 1) +  # Black vertical line at 0
geom_vline(xintercept = real_effs$bQ, color = "red", size = 1)
