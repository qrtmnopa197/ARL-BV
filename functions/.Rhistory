}
trials <- filter(trials, delete_row == 0) #actually delete the marked rows
trials <- select(trials, -delete_row,-ends_with(".ran")) #get rid of .ran and delete_row columns
#Do some variable recoding...
#if the data has a "too slow" column in it...
if(any(names(trials) == "too_slow")){
#if the subject was "too slow" on a trial, mark the trial as late
for(row in 1:nrow(trials)){
if(trials$too_slow[row] == "TRUE"){
trials$choice[row] <- "late"
}
}
trials <- select(trials,-too_slow) #don't need this anymore
}
#python indexing starts at 0, so this rectifies that
trials$trial <- trials$trial_raw + 1
trials$block <- trials$block_raw + 1
trials <- select(trials,-c(trial_raw,block_raw)) #don't need raw rows anymore
view(trials)
for(row in 1:nrow(trials)){
#if you're on a repetition
if(trials$makeup_repetition[row] != 0){
trials$trial[row] <- trials$trial[row-1] + 1 #set the trial value to one more than the previous trial
}
}
view(trials)
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
#Reduce the fA/B_img columns to just the fractal number - not the whole path to the jpg
trials <- mutate(trials, fA_img = str_extract(fA_img,"\\d+"), fB_img = str_extract(fB_img,"\\d+"))
view(trials)
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
library(ddpcr)
library(tidyverse)
library(sigmoid)
if(!is.function(get_csvs_to_analyze)){
stop("get_csvs_to_analyze() is not loaded into the environment of arl_wrangle_psychopy_data(), suggesting that the functions in s22_utilities.R are not present in the function's environment.")
}
print(csv_path) #print the csv path for debugging purposes - so you know what subject you're on
df_full <- read_csv(csv_path) #read in subject's data
#if the subject never pressed the right arrow key on affect probes, the RT columns won't appear. Thus, you need to create fully empty RT columns for them.
if(!("val_rat.rt" %in% names(df_full))){
df_full$val_rat.rt <- NA
}
#make one df with all the subject-level info, and a second with all the trial-level info
sub_info <- select(df_full, any_of(c(id = "id", "age_gender_formresponse", "date", "earnings_before_ec", total_experiment_time = "total_experiment_time",
comp_qs = "mouse_3.clicked_name",instruct_keypress = "instruct_key.keys",
is_check = "pressq_interscreen.keys", rev_check = "pressq_reveal.keys", val_check = "pressq_valrat.keys")))
trials <- select(df_full, any_of(c("fA_rew_dist","fA_fo_dist","fB_rew_dist","fB_fo_dist","fA_img","fB_img",
dec_rt = "mouse.rt", too_slow = "too_slow","mouse.clicked_name","click","reward","fake_out",
val_rat = "val_slider.response", val_rat_rt = "val_rat.rt",
trial_raw = "trials.thisN", block_raw = "blocks.thisN", makeup_repetition = "trials_and_makeups.thisN")),
ends_with(".ran"))
#if the "click" variable was recorded for this subject...
if("click" %in% names(trials)){
trials <- trials %>% rename(choice = click) %>% select(-mouse.clicked_name) #name the click column choice, and get rid of the clicked_name column
} else{
trials <- trials %>% rename(choice = mouse.clicked_name) #if not, clicked_name will have to be the choice column
trials$choice <- gsub("_dec$", "", trials$choice) #remove the trailing dec
}
#FIRST, REFORMAT THE TRIALS DF...
#Find the rows containing the first and last trials, getting rid of everything above and below those...
aff_qs_run <- which(trials$aff_qs.ran == 1) #identify the rows on which aff_qs - the last loop before the main task - ran
main_task_start <- max(aff_qs_run) + 1 #the row after the last run of this loop should be the first trial
block_runs <- which(trials$blocks.ran == 1) #identify all rows on which the blocks loop ran.
main_task_end <- max(block_runs) #the last run of this loop signifies the end of the main task
trials <- trials[main_task_start:main_task_end,] #keep only rows within the main task
#Create columns for block number and what makeup/repetition a trial represents
#Block number and makeup/repetition number are output at the end of each block/repetition loop,
#so you need to fill out all the rows above each loop end
#with that value. You can use the custom "fill_vec" function to do this (see s22_functions.R in this folder)
trials$block_raw <- fill_vec(trials$block_raw, bottom_up = TRUE)
trials$makeup_repetition <- fill_vec(trials$makeup_repetition, bottom_up = TRUE)
# You want one row per trial, meaning you want to ratchet down one row at the end of every trial.
# Fortunately, the end of each trial is marked by a loop end, so psychopy does indeed ratchet down one row
# at the end of every trial. However, there are a few loops that sometimes end in between trials -
#  i.e., before the trial starts, with the first trial always starting on the right row -
# leading to an unnecessary ratchet-down before the start of the next trial, before any trial data has been collected.
# To resolve this issue, you can simply delete all rows on which these loops have run/the pre-trial ratchet-down
# has occurred (since no trial data is collected before the ratchet-down).
# A second issue is that there’s a loop which sometimes ends in the middle of a trial (remaining_trial),
# which results in a single trial’s data being spread across two lines.
# To address this, you should identify trials in which there was a ratchet-down mid-trial.
# In these cases, you know that the current row and the row below it represent a single trial’s data,
# and that you need to combine them into one row. The simplest way to do this is to copy the trial data
# on the second row to the first row, thus ensuring that the first row contains the full trial’s data.
# Then, delete the second row, which contains only redundant information.
trials$delete_row <- 0
for(row in 1:nrow(trials)){
#On rows where a pre-trial ratchet-down has occurred...
if (!is.na(trials$trials_and_makeups.ran[row]) | !(is.na(trials$blocks.ran[row]))){
trials$delete_row[row] <- 1 #mark row for deletion
} else if (!(is.na(trials$remaining_trial.ran[row]))){
#Mid-trial ratchet-down. First, copy all the valuable data from the row below to the row on which the trial started.
row_below <- row + 1
trials$trial_raw[row] <- trials$trial_raw[row_below]
trials$fB_img[row] <- trials$fB_img[row_below]
trials$fA_img[row] <- trials$fA_img[row_below]
trials$fA_rew_dist[row]<- trials$fA_rew_dist[row_below]
trials$fA_fo_dist[row]<- trials$fA_fo_dist[row_below]
trials$fB_rew_dist[row]<- trials$fB_rew_dist[row_below]
trials$fB_fo_dist[row]<- trials$fB_fo_dist[row_below]
if(any(names(trials) == "too_slow")){
trials$too_slow[row] <- trials$too_slow[row_below]
}
#Now, mark the row below (containing only redundant data) for deletion
trials$delete_row[row_below] <- 1
}
}
trials <- filter(trials, delete_row == 0) #actually delete the marked rows
trials <- select(trials, -delete_row,-ends_with(".ran")) #get rid of .ran and delete_row columns
#Do some variable recoding...
#if the data has a "too slow" column in it...
if(any(names(trials) == "too_slow")){
#if the subject was "too slow" on a trial, mark the trial as late
for(row in 1:nrow(trials)){
if(trials$too_slow[row] == "TRUE"){
trials$choice[row] <- "late"
}
}
trials <- select(trials,-too_slow) #don't need this anymore
}
#python indexing starts at 0, so this rectifies that
trials$trial <- trials$trial_raw + 1
trials$block <- trials$block_raw + 1
trials <- select(trials,-c(trial_raw,block_raw)) #don't need raw rows anymore
#Trials actually give you the trial within the trials_and_makeups loop, not the trial within the block.
#You can rectify this by going through the df top to bottom, making each repetition trial equal to the preceding trial plus one
#NB:This only works assuming the trials are in ascending order and there are no gaps between trials. It's very difficult to do this
#in a more principled way, so you'll just have to go with this for now.
for(row in 1:nrow(trials)){
#if you're on a repetition
if(trials$makeup_repetition[row] != 0){
trials$trial[row] <- trials$trial[row-1] + 1 #set the trial value to one more than the previous trial
}
}
#Reduce the fA/B_img columns to just the fractal number - not the whole path to the JPEG
trials <- mutate(trials, fA_img = str_extract(fA_img,"\\d+"), fB_img = str_extract(fB_img,"\\d+"))
trials$row_index <- c(1:nrow(trials)) #get the row numbers for this subject, which will be useful for a number of things to follow
trials$choice_numeric <- ifelse(trials$choice=="fA",1,2) #get a numeric version of choice - 1 for A, 2 for B
trials <- trials %>% mutate(trials, if_else(fA_rew_dist == fB_rew_dist,"affect","reward")) #create column signifying whether the trial features an affect or reward pair
view(trials)
library(ddpcr)
library(tidyverse)
library(sigmoid)
if(!is.function(get_csvs_to_analyze)){
stop("get_csvs_to_analyze() is not loaded into the environment of arl_wrangle_psychopy_data(), suggesting that the functions in s22_utilities.R are not present in the function's environment.")
}
print(csv_path) #print the csv path for debugging purposes - so you know what subject you're on
df_full <- read_csv(csv_path) #read in subject's data
#if the subject never pressed the right arrow key on affect probes, the RT columns won't appear. Thus, you need to create fully empty RT columns for them.
if(!("val_rat.rt" %in% names(df_full))){
df_full$val_rat.rt <- NA
}
#make one df with all the subject-level info, and a second with all the trial-level info
sub_info <- select(df_full, any_of(c(id = "id", "age_gender_formresponse", "date", "earnings_before_ec", total_experiment_time = "total_experiment_time",
comp_qs = "mouse_3.clicked_name",instruct_keypress = "instruct_key.keys",
is_check = "pressq_interscreen.keys", rev_check = "pressq_reveal.keys", val_check = "pressq_valrat.keys")))
trials <- select(df_full, any_of(c("fA_rew_dist","fA_fo_dist","fB_rew_dist","fB_fo_dist","fA_img","fB_img",
dec_rt = "mouse.rt", too_slow = "too_slow","mouse.clicked_name","click","reward","fake_out",
val_rat = "val_slider.response", val_rat_rt = "val_rat.rt",
trial_raw = "trials.thisN", block_raw = "blocks.thisN", makeup_repetition = "trials_and_makeups.thisN")),
ends_with(".ran"))
#if the "click" variable was recorded for this subject...
if("click" %in% names(trials)){
trials <- trials %>% rename(choice = click) %>% select(-mouse.clicked_name) #name the click column choice, and get rid of the clicked_name column
} else{
trials <- trials %>% rename(choice = mouse.clicked_name) #if not, clicked_name will have to be the choice column
trials$choice <- gsub("_dec$", "", trials$choice) #remove the trailing dec
}
#FIRST, REFORMAT THE TRIALS DF...
#Find the rows containing the first and last trials, getting rid of everything above and below those...
aff_qs_run <- which(trials$aff_qs.ran == 1) #identify the rows on which aff_qs - the last loop before the main task - ran
main_task_start <- max(aff_qs_run) + 1 #the row after the last run of this loop should be the first trial
block_runs <- which(trials$blocks.ran == 1) #identify all rows on which the blocks loop ran.
main_task_end <- max(block_runs) #the last run of this loop signifies the end of the main task
trials <- trials[main_task_start:main_task_end,] #keep only rows within the main task
#Create columns for block number and what makeup/repetition a trial represents
#Block number and makeup/repetition number are output at the end of each block/repetition loop,
#so you need to fill out all the rows above each loop end
#with that value. You can use the custom "fill_vec" function to do this (see s22_functions.R in this folder)
trials$block_raw <- fill_vec(trials$block_raw, bottom_up = TRUE)
trials$makeup_repetition <- fill_vec(trials$makeup_repetition, bottom_up = TRUE)
# You want one row per trial, meaning you want to ratchet down one row at the end of every trial.
# Fortunately, the end of each trial is marked by a loop end, so psychopy does indeed ratchet down one row
# at the end of every trial. However, there are a few loops that sometimes end in between trials -
#  i.e., before the trial starts, with the first trial always starting on the right row -
# leading to an unnecessary ratchet-down before the start of the next trial, before any trial data has been collected.
# To resolve this issue, you can simply delete all rows on which these loops have run/the pre-trial ratchet-down
# has occurred (since no trial data is collected before the ratchet-down).
# A second issue is that there’s a loop which sometimes ends in the middle of a trial (remaining_trial),
# which results in a single trial’s data being spread across two lines.
# To address this, you should identify trials in which there was a ratchet-down mid-trial.
# In these cases, you know that the current row and the row below it represent a single trial’s data,
# and that you need to combine them into one row. The simplest way to do this is to copy the trial data
# on the second row to the first row, thus ensuring that the first row contains the full trial’s data.
# Then, delete the second row, which contains only redundant information.
trials$delete_row <- 0
for(row in 1:nrow(trials)){
#On rows where a pre-trial ratchet-down has occurred...
if (!is.na(trials$trials_and_makeups.ran[row]) | !(is.na(trials$blocks.ran[row]))){
trials$delete_row[row] <- 1 #mark row for deletion
} else if (!(is.na(trials$remaining_trial.ran[row]))){
#Mid-trial ratchet-down. First, copy all the valuable data from the row below to the row on which the trial started.
row_below <- row + 1
trials$trial_raw[row] <- trials$trial_raw[row_below]
trials$fB_img[row] <- trials$fB_img[row_below]
trials$fA_img[row] <- trials$fA_img[row_below]
trials$fA_rew_dist[row]<- trials$fA_rew_dist[row_below]
trials$fA_fo_dist[row]<- trials$fA_fo_dist[row_below]
trials$fB_rew_dist[row]<- trials$fB_rew_dist[row_below]
trials$fB_fo_dist[row]<- trials$fB_fo_dist[row_below]
if(any(names(trials) == "too_slow")){
trials$too_slow[row] <- trials$too_slow[row_below]
}
#Now, mark the row below (containing only redundant data) for deletion
trials$delete_row[row_below] <- 1
}
}
trials <- filter(trials, delete_row == 0) #actually delete the marked rows
trials <- select(trials, -delete_row,-ends_with(".ran")) #get rid of .ran and delete_row columns
#Do some variable recoding...
#if the data has a "too slow" column in it...
if(any(names(trials) == "too_slow")){
#if the subject was "too slow" on a trial, mark the trial as late
for(row in 1:nrow(trials)){
if(trials$too_slow[row] == "TRUE"){
trials$choice[row] <- "late"
}
}
trials <- select(trials,-too_slow) #don't need this anymore
}
#python indexing starts at 0, so this rectifies that
trials$trial <- trials$trial_raw + 1
trials$block <- trials$block_raw + 1
trials <- select(trials,-c(trial_raw,block_raw)) #don't need raw rows anymore
#Trials actually give you the trial within the trials_and_makeups loop, not the trial within the block.
#You can rectify this by going through the df top to bottom, making each repetition trial equal to the preceding trial plus one
#NB:This only works assuming the trials are in ascending order and there are no gaps between trials. It's very difficult to do this
#in a more principled way, so you'll just have to go with this for now.
for(row in 1:nrow(trials)){
#if you're on a repetition
if(trials$makeup_repetition[row] != 0){
trials$trial[row] <- trials$trial[row-1] + 1 #set the trial value to one more than the previous trial
}
}
#Reduce the fA/B_img columns to just the fractal number - not the whole path to the JPEG
trials <- mutate(trials, fA_img = str_extract(fA_img,"\\d+"), fB_img = str_extract(fB_img,"\\d+"))
trials$row_index <- c(1:nrow(trials)) #get the row numbers for this subject, which will be useful for a number of things to follow
trials$choice_numeric <- ifelse(trials$choice=="fA",1,2) #get a numeric version of choice - 1 for A, 2 for B
trials <- trials %>% mutate(trials, pair_type = if_else(fA_rew_dist == fB_rew_dist,"affect","reward")) #create column signifying whether the trial features an affect or reward pair
view(trials)
starts_with()
startsWith()
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
trials$fA_type <- NA
trials$fB_type <- NA
for(row in 1:nrow(trials)){
#if it's an affect pair...
if(trials$pair_type[row] == "affect"){
#if the name of the fA fo dist starts with n...
if(startsWith(trials$fA_fo_dist[row],"n")){
#that means that fA is the high-affect fractal, and B the low
trials$fA_type[row] <- "hi"
trials$fB_type[row] <- "lo"
} else if(startsWith(trials$fA_fo_dist[row],"p")){
#if the fo dist starts with p, then fA is low-affect and fB is high
trials$fA_type[row] <- "lo"
trials$fB_type[row] <- "hi"
}
} else if(trials$pair_type[row] == "reward"){
#if it's a reward pair, and the fA reward distribution is one of the following...
if(trials$fA_rew_dist[row] == "uni_n2p5"){
#that means that fA is the high-reward fractal, and B the low
trials$fA_type[row] <- "hi"
trials$fB_type[row] <- "lo"
} else if (trials$fA_rew_dist[row] == "uni_n5p2"){
#if the fA reward distribution is one of the above, then fA was the low-reward fractal and B the high
trials$fA_type[row] <- "lo"
trials$fB_type[row] <- "hi"
}
}
}
view(trials)
trials$hi_chosen <- NA
for(row in 1:nrow(trials)){
#if fA was chosen...
if(trials$choice[row] == "fA"){
#if fA type was high...
if(trials$fA_type[row] == "hi"){
trials$hi_chosen[row] <- 1 #hi was chosen
} else{
trials$hi_chosen[row] <- 0 #otherwise it wasn't
}
} else if(trials$choice[row] == "fB"){
#if fB was chosen, and fB was high...
if(trials$fB_type[row] == "hi"){
trials$hi_chosen[row] <- 1 #then hi was chosen
} else{
trials$hi_chosen[row] <- 0 #otherwise it wasn't
}
}
}
view(trials)
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
source("~/projects/ARL/code/functions/arl_wrangle_psychopy_data.R")
stay_data <- filter(trials,choice != "late") #just look at non-late choices (coding this is tricky if you look at everything)
stay_data$stay <- NA #initialize stay column
#go trial-by-trial...
for(row in 1:nrow(stay_data)){
pair_rows <- which(stay_data$fA_img == stay_data$fA_img[row]) #identify the rows on which the participant played with the same pair
#if there are future rows on which they played with the same pair...
if(any(pair_rows > row)){
future_pres <- pair_rows[pair_rows > row] #identify all future trials/rows in which this pair was presented
next_pres <- min(future_pres) #identify the next choice with this pair by taking the min of this vector
if(stay_data$choice[next_pres] == stay_data$choice[row]){
stay_data$stay[row] <- 1 #if the choice at the next presentation is the same as the current choice, the participant "stayed"
} else if(stay_data$choice[next_pres] != stay_data$choice[row]){
stay_data$stay[row] <- 0 #otherwise they switched
}
}
}
#join this stay column back to the main trials df
stay_join <- select(stay_data,row_index,stay)
trials <- left_join(trials,stay_join,by="row_index")
view(trials)
library(ddpcr)
library(tidyverse)
library(sigmoid)
if(!is.function(get_csvs_to_analyze)){
stop("get_csvs_to_analyze() is not loaded into the environment of arl_wrangle_psychopy_data(), suggesting that the functions in s22_utilities.R are not present in the function's environment.")
}
print(csv_path) #print the csv path for debugging purposes - so you know what subject you're on
df_full <- read_csv(csv_path) #read in subject's data
#if the subject never pressed the right arrow key on affect probes, the RT columns won't appear. Thus, you need to create fully empty RT columns for them.
if(!("val_rat.rt" %in% names(df_full))){
df_full$val_rat.rt <- NA
}
#make one df with all the subject-level info, and a second with all the trial-level info
sub_info <- select(df_full, any_of(c(id = "id", "age_gender_formresponse", "date", "earnings_before_ec", total_experiment_time = "total_experiment_time",
comp_qs = "mouse_3.clicked_name",instruct_keypress = "instruct_key.keys",
is_check = "pressq_interscreen.keys", rev_check = "pressq_reveal.keys", val_check = "pressq_valrat.keys")))
trials <- select(df_full, any_of(c("fA_rew_dist","fA_fo_dist","fB_rew_dist","fB_fo_dist","fA_img","fB_img",
dec_rt = "mouse.rt", too_slow = "too_slow","mouse.clicked_name","click","reward","fake_out",
val_rat = "val_slider.response", val_rat_rt = "val_rat.rt",
trial_raw = "trials.thisN", block_raw = "blocks.thisN", makeup_repetition = "trials_and_makeups.thisN")),
ends_with(".ran"))
#if the "click" variable was recorded for this subject...
if("click" %in% names(trials)){
trials <- trials %>% rename(choice = click) %>% select(-mouse.clicked_name) #name the click column choice, and get rid of the clicked_name column
} else{
trials <- trials %>% rename(choice = mouse.clicked_name) #if not, clicked_name will have to be the choice column
trials$choice <- gsub("_dec$", "", trials$choice) #remove the trailing dec
}
#FIRST, REFORMAT THE TRIALS DF...
#Find the rows containing the first and last trials, getting rid of everything above and below those...
aff_qs_run <- which(trials$aff_qs.ran == 1) #identify the rows on which aff_qs - the last loop before the main task - ran
main_task_start <- max(aff_qs_run) + 1 #the row after the last run of this loop should be the first trial
block_runs <- which(trials$blocks.ran == 1) #identify all rows on which the blocks loop ran.
main_task_end <- max(block_runs) #the last run of this loop signifies the end of the main task
trials <- trials[main_task_start:main_task_end,] #keep only rows within the main task
#Create columns for block number and what makeup/repetition a trial represents
#Block number and makeup/repetition number are output at the end of each block/repetition loop,
#so you need to fill out all the rows above each loop end
#with that value. You can use the custom "fill_vec" function to do this (see s22_functions.R in this folder)
trials$block_raw <- fill_vec(trials$block_raw, bottom_up = TRUE)
trials$makeup_repetition <- fill_vec(trials$makeup_repetition, bottom_up = TRUE)
# You want one row per trial, meaning you want to ratchet down one row at the end of every trial.
# Fortunately, the end of each trial is marked by a loop end, so psychopy does indeed ratchet down one row
# at the end of every trial. However, there are a few loops that sometimes end in between trials -
#  i.e., before the trial starts, with the first trial always starting on the right row -
# leading to an unnecessary ratchet-down before the start of the next trial, before any trial data has been collected.
# To resolve this issue, you can simply delete all rows on which these loops have run/the pre-trial ratchet-down
# has occurred (since no trial data is collected before the ratchet-down).
# A second issue is that there’s a loop which sometimes ends in the middle of a trial (remaining_trial),
# which results in a single trial’s data being spread across two lines.
# To address this, you should identify trials in which there was a ratchet-down mid-trial.
# In these cases, you know that the current row and the row below it represent a single trial’s data,
# and that you need to combine them into one row. The simplest way to do this is to copy the trial data
# on the second row to the first row, thus ensuring that the first row contains the full trial’s data.
# Then, delete the second row, which contains only redundant information.
trials$delete_row <- 0
for(row in 1:nrow(trials)){
#On rows where a pre-trial ratchet-down has occurred...
if (!is.na(trials$trials_and_makeups.ran[row]) | !(is.na(trials$blocks.ran[row]))){
trials$delete_row[row] <- 1 #mark row for deletion
} else if (!(is.na(trials$remaining_trial.ran[row]))){
#Mid-trial ratchet-down. First, copy all the valuable data from the row below to the row on which the trial started.
row_below <- row + 1
trials$trial_raw[row] <- trials$trial_raw[row_below]
trials$fB_img[row] <- trials$fB_img[row_below]
trials$fA_img[row] <- trials$fA_img[row_below]
trials$fA_rew_dist[row]<- trials$fA_rew_dist[row_below]
trials$fA_fo_dist[row]<- trials$fA_fo_dist[row_below]
trials$fB_rew_dist[row]<- trials$fB_rew_dist[row_below]
trials$fB_fo_dist[row]<- trials$fB_fo_dist[row_below]
if(any(names(trials) == "too_slow")){
trials$too_slow[row] <- trials$too_slow[row_below]
}
#Now, mark the row below (containing only redundant data) for deletion
trials$delete_row[row_below] <- 1
}
}
trials <- filter(trials, delete_row == 0) #actually delete the marked rows
trials <- select(trials, -delete_row,-ends_with(".ran")) #get rid of .ran and delete_row columns
#Do some variable recoding...
#if the data has a "too slow" column in it...
if(any(names(trials) == "too_slow")){
#if the subject was "too slow" on a trial, mark the trial as late
for(row in 1:nrow(trials)){
if(trials$too_slow[row] == "TRUE"){
trials$choice[row] <- "late"
}
}
trials <- select(trials,-too_slow) #don't need this anymore
}
#python indexing starts at 0, so this rectifies that
trials$trial <- trials$trial_raw + 1
trials$block <- trials$block_raw + 1
trials <- select(trials,-c(trial_raw,block_raw)) #don't need raw rows anymore
#Trials actually give you the trial within the trials_and_makeups loop, not the trial within the block.
#You can rectify this by going through the df top to bottom, making each repetition trial equal to the preceding trial plus one
#NB:This only works assuming the trials are in ascending order and there are no gaps between trials. It's very difficult to do this
#in a more principled way, so you'll just have to go with this for now.
for(row in 1:nrow(trials)){
#if you're on a repetition
if(trials$makeup_repetition[row] != 0){
trials$trial[row] <- trials$trial[row-1] + 1 #set the trial value to one more than the previous trial
}
}
#Reduce the fA/B_img columns to just the fractal number - not the whole path to the JPEG
trials <- mutate(trials, fA_img = str_extract(fA_img,"\\d+"), fB_img = str_extract(fB_img,"\\d+"))
trials$row_index <- c(1:nrow(trials)) #get the row numbers for this subject, which will be useful for a number of things to follow
trials$choice_numeric <- ifelse(trials$choice=="fA",1,2) #get a numeric version of choice - 1 for A, 2 for B
trials <- trials %>% mutate(trials, pair_type = if_else(fA_rew_dist == fB_rew_dist,"affect","reward")) #create column signifying whether the trial features an affect or reward pair
#create columns signifying whether fA and fB are the low or high fractal in the pair (e.g., high-affect, low-reward)
trials$fA_type <- NA
trials$fB_type <- NA
for(row in 1:nrow(trials)){
#if it's an affect pair...
if(trials$pair_type[row] == "affect"){
#if the name of the fA fo dist starts with n...
if(startsWith(trials$fA_fo_dist[row],"n")){
#that means that fA is the high-affect fractal, and B the low
trials$fA_type[row] <- "hi"
trials$fB_type[row] <- "lo"
} else if(startsWith(trials$fA_fo_dist[row],"p")){
#if the fo dist starts with p, then fA is low-affect and fB is high
trials$fA_type[row] <- "lo"
trials$fB_type[row] <- "hi"
}
} else if(trials$pair_type[row] == "reward"){
#if it's a reward pair, and the fA reward distribution is one of the following...
if(trials$fA_rew_dist[row] == "uni_n2p5"){
#that means that fA is the high-reward fractal, and B the low
trials$fA_type[row] <- "hi"
trials$fB_type[row] <- "lo"
} else if (trials$fA_rew_dist[row] == "uni_n5p2"){
#if the fA reward distribution is one of the above, then fA was the low-reward fractal and B the high
trials$fA_type[row] <- "lo"
trials$fB_type[row] <- "hi"
}
}
}
#Create a column signifying whether the higher-value fractal was chosen
trials$hi_chosen <- NA
for(row in 1:nrow(trials)){
#if fA was chosen...
if(trials$choice[row] == "fA"){
#if fA type was high...
if(trials$fA_type[row] == "hi"){
trials$hi_chosen[row] <- 1 #hi was chosen
} else{
trials$hi_chosen[row] <- 0 #otherwise it wasn't
}
} else if(trials$choice[row] == "fB"){
#if fB was chosen, and fB was high...
if(trials$fB_type[row] == "hi"){
trials$hi_chosen[row] <- 1 #then hi was chosen
} else{
trials$hi_chosen[row] <- 0 #otherwise it wasn't
}
}
}
#create a "stay" column, indicating whether the participant made the same choice the next time the pair was presented (if so, 1) or not (if so, 0)
stay_data <- filter(trials,choice != "late") #just look at non-late choices (coding this is tricky if you look at everything)
stay_data$stay <- NA #initialize stay column
#go trial-by-trial...
for(row in 1:nrow(stay_data)){
pair_rows <- which(stay_data$fA_img == stay_data$fA_img[row]) #identify the rows on which the participant played with the same pair
#if there are future rows on which they played with the same pair...
if(any(pair_rows > row)){
future_pres <- pair_rows[pair_rows > row] #identify all future trials/rows in which this pair was presented
next_pres <- min(future_pres) #identify the next choice with this pair by taking the min of this vector
if(stay_data$choice[next_pres] == stay_data$choice[row]){
stay_data$stay[row] <- 1 #if the choice at the next presentation is the same as the current choice, the participant "stayed"
} else if(stay_data$choice[next_pres] != stay_data$choice[row]){
stay_data$stay[row] <- 0 #otherwise they switched
}
}
}
#join this stay column back to the main trials df
stay_join <- select(stay_data,row_index,stay)
trials <- left_join(trials,stay_join,by="row_index")
view(trials)
