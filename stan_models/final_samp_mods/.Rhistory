knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
##SET MANUALLY
path_to_project_directory <- "~/projects/s22_follow_up/"
path_to_s22 <- "~/projects/spring_2022_study/"
##############
stan_model_dir_s22fu <- paste0(path_to_project_directory,"code/stan_models/")
stan_model_dir_s22 <- paste0(path_to_s22,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
library(cmdstanr)
library(tidyverse)
library(tidybayes)
library(loo)
library(GGally)
library(bayesplot)
library(sigmoid)
library(abind)
source(paste0(path_to_project_directory,"code/functions/s22fu_utilities.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2023-06-12_09_56_03.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2023-06-12_09_56_03.csv"))
#identify subjects who fail the hard QC cutoffs
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 104 |
valrate_skipped_percent > .14 |
valence_sd < .1 |
decrate_sd < .05 |
feedrate_sd < .05)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] < 4,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$valrate_skipped_percent[i] > .07,
subs$choice_pt_completed[i] == 0, subs$decrate_pt_completed[i] == 0, subs$feedrate_pt_completed == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
trials <- trials %>% filter(!(id %in% subs_to_exclude)) %>% filter(choice != "late") #filter out bad subjects, as well as trials on which the subject failed to make a choice
subs <- subs %>% filter(!(id %in% subs_to_exclude))
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
#add a column with completed trial numbers - the trial indices if you ignore late trials. These will match the "t" trial numbers used in the Stan models
trials <- do.call(rbind,by(trials,trials$sub_index,add_trials_nl))
trials$overall_trial_nl <- 1:nrow(trials) #get the overall trial number ignoring late trials and collapsing across subjects
#get mean-centered trial and block predictors for easier fitting in Stan
trials$trial_nl_cent <- trials$trial_nl - mean(trials$trial_nl)
trials$block_cent <- trials$block - mean(trials$block)
#Create indices from 1:n_f for each fractal image. To do this, first create a mini-df with one column having all the fA_img values and the other two
#columns having indices for fA and fB. This assumes that every fA_img is paired with a unique fB_img.
f_index_df <- data.frame(fA_img = unique(trials$fA_img),fA_ix = 1:length(unique(trials$fA_img)),fB_ix = (1:length(unique(trials$fA_img))+length(unique(trials$fA_img))))
trials <- left_join(trials,f_index_df,by="fA_img")
#get the chosen fractal index
trials <- trials %>% mutate(chosen_frac = ifelse(choice == "fA",fA_ix,fB_ix))
trials <- trials %>% mutate(unchosen_frac = ifelse(choice == "fA",fB_ix,fA_ix))
#add a column with the affect probe number for each subject (999 if no probe response). These will be passed into Stan
trials <- add_probe_number(trials,newcol="dec_probe_number",val_col="dec_rate") #for decision probes
trials <- add_probe_number(trials,newcol="feed_probe_number",val_col="feed_rate") #for decision probes
trials_frate <- trials %>% filter(block_feedrate == 1) #get only trials from feedback rating blocks
filt_sum(model_pred_arl_nonuis$sum,"mu")
filt_sum(breakdown_s2$sum,"mu")
model_pred_arl <- read_fsml("model_pred_arl",model_out_dir=model_out_dir)
filt_sum(model_pred_arl$sum,"mu")
filt_sum(breakdown_s2$sum,"mu")
filt_sum(model_pred_arl_nonuis$sum,"mu")
filt_sum(model_pred_arl$sum,"mu")
ratings_arl <- read_fsml("ratings_arl",model_out_dir=model_out_dir)
filt_sum(ratings_arl$sum,"mu")
filt_sum(breakdown_s2$sum,"mu")
sd(c(-2,2))
sigmoid(3)
breakdown_s2$diagnostics
filt_sum(breakdown_s2$sum,"mu | sigma")
filt_sum(breakdown_s2$sum,"mu)
filt_sum(breakdown_s2$sum,"mu" | "sigma")
filt_sum(breakdown_s2$sum,"mu)
)
filt_sum(breakdown_s2$sum,"mu" | "sigma")
filt_sum(breakdown_s2$sum,"mu")
filt_sum(breakdown_s2$sum,"sigma")
filt_sum(ratings_arl$sum,"sigma")
filt_sum(model_pred_arl$sum,"sigma")
filt_sum(breakdown_s2$sum,"sigma")
choice_mus <- get_draws("breakdown_s2",model_out_dir=model_out_dir,vars=c("aff_sens_mu","resid_sens_mu","nuis_sens_mu"))
mcmc_areas(
choice_mus,
pars="aff_sens_mu",
area_method = "scaled height",
prob = 0.9,
prob_outer = .99,
point_est = "median"
)
mcmc_areas(
choice_mus,
pars="aff_sens_mu",
area_method = "scaled height",
prob = 0.9,
prob_outer = 1,
point_est = "median"
)
mcmc_areas(
choice_mus,
pars="rew_sens_mu",
area_method = "scaled height",
prob = 0.9,
prob_outer = 1,
point_est = "median"
)
mcmc_areas(
choice_mus,
pars="resid_sens_mu",
area_method = "scaled height",
prob = 0.9,
prob_outer = 1,
point_est = "median"
)
mcmc_areas(
choice_mus,
pars="resid_sens_mu",
area_method = "scaled height",
prob = 0.9,
prob_outer = .99,
point_est = "median"
)
mcmc_areas(
choice_mus,
pars="nuis_sens_mu",
area_method = "scaled height",
prob = 0.9,
prob_outer = .99,
point_est = "median"
)
fsml_compare(breakdown_s2,model_pred_arl_nonuis)
fsml_compare(breakdown_s2,ratings_arl)
test <- c(1,2,3,-1,0)
mean(test > 0)
filt_sum(breakdown_s2$sum,"mu")
stay_fit
trials_frate_scale <- trials_frate %>% mutate(feed_rate_z=scale(feed_rate_z),chosen_out=scale(chosen_out))
stay_fit <- lmer(stay ~ feed_rate_z + chosen_out + (feed_rate_z + chosen_out | sub_index),trials_frate_scale)
library(lme4)
stay_fit <- lmer(stay ~ feed_rate_z + chosen_out + (feed_rate_z + chosen_out | sub_index),trials_frate_scale)
stay_fit2 <- lmer(stay ~ chosen_out + (chosen_out | sub_index),trials_frate_scale)
anova(stay_fit,stay_fit2)
stay_fit <- lmer(stay ~ feed_rate_z + chosen_out + (feed_rate_z + chosen_out | sub_index),trials_frate_scale)
stay_fit2 <- lmer(stay ~ chosen_out + (chosen_out | sub_index),trials_frate_scale)
summary(stay_fit)
anova(stay_fit,stay_fit2)
stay_fit_lm1 <- lm(stay ~ feed_rate_z + chosen_out,trials_frate_scale)
stay_fit_lm2 <- lm(stay ~ chosen_out,trials_frate_scale)
anova(stay_fit_lm1,stay_fit_lm2)
stay_fit2 <- lmer(stay ~  chosen_out + (chosen_out | sub_index),trials_frate_scale)
summary(stay_fit2)
summary(stay_fit)
trials_frate_scale <- trials %>% filter(!is.na(feed_rate_z)) %>% mutate(feed_rate_z=scale(feed_rate_z),chosen_out=scale(chosen_out))
stay_fit <- lmer(stay ~ feed_rate_z + chosen_out + (feed_rate_z + chosen_out | sub_index),trials_frate_scale)
stay_fit2 <- lmer(stay ~  chosen_out + (chosen_out | sub_index),trials_frate_scale)
anova(stay_fit,stay_fit2)
summary(stay_fit)
summary(stay_fit2)
summary(stay_fit)
filt_sum(breakdown_s2$sum,"mu")
lag_reg <- glm(fA_chosen ~
box_val_rc_lag1 + box_val_rc_lag2 + box_val_rc_lag3 + box_val_rc_lag4, data=trials_bin,family=binomial)
trials_fres <- trials %>% filter(show_fres == 1)
